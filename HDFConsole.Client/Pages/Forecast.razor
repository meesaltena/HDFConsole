@page "/forecast"
@using HDFConsole.Models
@using System.Text.Json
@inject HttpClient Http

<PageTitle>Forecast</PageTitle>


@if (files == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="contentDiv">
        <div class="tableDiv">
            <h4>@files[selectedFileIndex].Filename</h4>
            <table class="modelTable">
                <tr>
                    <th align="left">Property</th>
                    <th align="left">Value</th>
                </tr>
                <tr>
                    <td>Filename</td>
                    <td>@files[selectedFileIndex].Filename</td>
                </tr>
                <tr>
                    <td>Size (bytes)</td>
                    <td>@files[selectedFileIndex].Size</td>
                </tr>
                <tr>
                    <td>Created</td>
                    <td>@files[selectedFileIndex].Created (@RelativeTimeFromNow(files[selectedFileIndex].Created))</td>
                </tr>
                <tr>
                    <td>Last Modified</td>
                    <td>@files[selectedFileIndex].LastModified</td>
                </tr>
                <tr>
                    <td>Dataset Name</td>
                    <td>@files[selectedFileIndex].DatasetName</td>
                </tr>
                <tr>
                    <td>Last refreshed:</td>
                    <td>
                    </td>
                </tr>
            </table>
        </div>
        <div>
            <table>
                <tr>
                    <td>
                        <h3>Image: @selectedFileIndex/@files.Length</h3>
                    </td>
                    <td class="buttonTd">
                        <button class="btn btn-secondary light float-right" @onclick="() => IncrementImage(-1)">
                            Previous image
                        </button>
                        <button class="btn btn-success" @onclick="StartAutoplay">
                            Autoplay
                        </button>
                        <button class="btn btn-secondary light float-left" @onclick="() => IncrementImage(1)">
                            Next image
                        </button>
                    </td>
                </tr>
            </table>
        </div>
        @* <h4>Image Data</h4> *@
        <div class="imageDiv">
            <img class="latestImage" src="@($"data:image/png;base64,{Convert.ToBase64String(files[selectedFileIndex].ImageData)}")" alt="Image" />
        </div>
    </div>
}

@code {
    private HDFFile[]? files;
    private DateTime fetchTime;
    private Timer? timer;
    private int selectedFileIndex = 0;
    private string fetchTimeAgo = $"(Refreshed 0m0s ago)";
    private bool autoplay = false;

    protected override async Task OnInitializedAsync()
    {
        await GetImages();
    }

    private async Task GetImages()
    {
        var response = await Http.GetAsync("files/list");

        if (response.IsSuccessStatusCode)
        {
            var stream = await response.Content.ReadAsStreamAsync();
            files = await JsonSerializer.DeserializeAsync<HDFFile[]>(stream, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
            fetchTime = DateTime.Now;
        }
    }

    private void UpdateFetchTimeAgo()
    {
        fetchTimeAgo = $"(Refreshed {RelativeTimeFromNow((DateTime)fetchTime)})";
    }

    private string RelativeTimeFromNow(DateTime time)
    {
        TimeSpan diff = DateTime.Now.Subtract(time);
        return $"{(int)diff.TotalMinutes}m{(int)diff.Seconds}s ago";
    }

    private void IncrementImage(int inc)
    {
        if(inc > 0)
        {
            if (selectedFileIndex == files?.Length - 1) // if true
            {
                selectedFileIndex = 0;
                return;
            }
        }
        else
        {
            if (selectedFileIndex == 0)
            {
                selectedFileIndex = files!.Length -1;
                return;
            }
        }
        selectedFileIndex += inc;
    }

    private void StartAutoplay(MouseEventArgs e)
    {
        if (!autoplay)
        {
            timer = new Timer(Tick, null, 0, 500);
            autoplay = true;
        }
        else
        {
            timer?.Dispose();
            autoplay = false;
        }
    }

    private void Tick(object? _)
    {
        Console.WriteLine("Timer tick");
        IncrementImage(1);
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
