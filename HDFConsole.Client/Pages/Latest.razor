@page "/latest"
@using HDFConsole.Models
@using System.Text.Json
@inject HttpClient Http

<PageTitle>Latest Image</PageTitle>

@if (file == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="contentDiv">
   
        <div class="tableDiv">
         <h4>@file.Filename</h4>
        
            <table class="modelTable">
                <tr>
                    <th align="left">Property</th>
                    <th align="left">Value</th>
                </tr>
                <tr>
                    <td>Filename</td>
                    <td>@file.Filename</td>
                </tr>
                <tr>
                    <td>Size (bytes)</td>
                    <td>@file.Size</td>
                </tr>
                <tr>
                    <td>Created</td>
                    <td>@file.Created (@RelativeTimeFromNow(file.Created))</td>
                </tr>
                <tr>
                    <td>Last Modified</td>
                    <td>@file.LastModified</td>
                </tr>
                <tr>
                    <td>Dataset Name</td>
                    <td>@file.DatasetName</td>
                </tr>
                <tr>
                    <td>Last refreshed:</td>
                    <td>@fetchTimeAgo <button class="btn btn-secondary light align-middle refreshButton" @onclick="RefreshImage">Refresh</button></td>
                </tr>
            </table>
        </div>
        <h4>Image Data</h4>
        <div class="imageDiv">
            <img class="latestImage" src="@($"data:image/png;base64,{Convert.ToBase64String(file.ImageData)}")" alt="Image" />
        </div>
    </div>
}

@code {
    private HDFFile? file;
    private DateTime fetchTime;
    private Timer? timer;
    private string fetchTimeAgo = $"(Refreshed 0m0s ago)";

    protected override async Task OnInitializedAsync()
    {
        await RefreshImage();
        UpdateFetchTimeAgo();
        timer = new Timer(Tick, null, 0, 1000);
    }

    private async Task RefreshImage()
    {
        var response = await Http.GetAsync("latest");

        if (response.IsSuccessStatusCode)
        {
            var stream = await response.Content.ReadAsStreamAsync();
            file = await JsonSerializer.DeserializeAsync<HDFFile>(stream, new JsonSerializerOptions(){PropertyNameCaseInsensitive = true});
            fetchTime = DateTime.Now;
        }
    }

    private void Tick(object? _)
    {
        UpdateFetchTimeAgo();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private void UpdateFetchTimeAgo()
    {
        fetchTimeAgo = $"(Refreshed {RelativeTimeFromNow((DateTime)fetchTime)})";
    }

    private string RelativeTimeFromNow(DateTime time)
    {
        TimeSpan diff = DateTime.Now.Subtract(time);
        return $"{(int)diff.TotalMinutes}m{(int)diff.Seconds}s ago";
    }
}
